import { PrismaService } from '../prisma/prisma.service';
import { UserRole, BookingStatus } from '@prisma/client';
export declare class AdminService {
    private prisma;
    constructor(prisma: PrismaService);
    getDashboardStats(): Promise<{
        totalUsers: number;
        totalHosts: number;
        totalInfluencers: number;
        totalBookings: number;
        totalRevenue: number;
        recentBookings: ({
            influencer: {
                id: string;
                email: string;
                password: string | null;
                name: string;
                role: import(".prisma/client").$Enums.UserRole;
                profileImage: string | null;
                bio: string | null;
                rating: number | null;
                createdAt: Date;
                updatedAt: Date;
                googleId: string | null;
                stripeCustomerId: string | null;
                stripeAccountId: string | null;
                refreshToken: string | null;
                isActive: boolean;
            };
            host: {
                id: string;
                email: string;
                password: string | null;
                name: string;
                role: import(".prisma/client").$Enums.UserRole;
                profileImage: string | null;
                bio: string | null;
                rating: number | null;
                createdAt: Date;
                updatedAt: Date;
                googleId: string | null;
                stripeCustomerId: string | null;
                stripeAccountId: string | null;
                refreshToken: string | null;
                isActive: boolean;
            };
            service: {
                id: string;
                rating: number | null;
                createdAt: Date;
                updatedAt: Date;
                category: string;
                price: number;
                title: string;
                description: string;
                meetingTypes: import(".prisma/client").$Enums.MeetingType[];
                influencerId: string;
                stripePriceId: string | null;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            influencerId: string;
            hostId: string;
            serviceId: string;
            status: import(".prisma/client").$Enums.BookingStatus;
            meetingType: import(".prisma/client").$Enums.MeetingType;
            meetingTime: Date;
            totalPrice: number;
            stripePaymentIntentId: string | null;
        })[];
    }>;
    getAllUsers(role?: UserRole): Promise<({
        servicesOffered: {
            id: string;
            rating: number | null;
            createdAt: Date;
            updatedAt: Date;
            category: string;
            price: number;
            title: string;
            description: string;
            meetingTypes: import(".prisma/client").$Enums.MeetingType[];
            influencerId: string;
            stripePriceId: string | null;
        }[];
        bookingsAsHost: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            influencerId: string;
            hostId: string;
            serviceId: string;
            status: import(".prisma/client").$Enums.BookingStatus;
            meetingType: import(".prisma/client").$Enums.MeetingType;
            meetingTime: Date;
            totalPrice: number;
            stripePaymentIntentId: string | null;
        }[];
        bookingsAsInfluencer: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            influencerId: string;
            hostId: string;
            serviceId: string;
            status: import(".prisma/client").$Enums.BookingStatus;
            meetingType: import(".prisma/client").$Enums.MeetingType;
            meetingTime: Date;
            totalPrice: number;
            stripePaymentIntentId: string | null;
        }[];
    } & {
        id: string;
        email: string;
        password: string | null;
        name: string;
        role: import(".prisma/client").$Enums.UserRole;
        profileImage: string | null;
        bio: string | null;
        rating: number | null;
        createdAt: Date;
        updatedAt: Date;
        googleId: string | null;
        stripeCustomerId: string | null;
        stripeAccountId: string | null;
        refreshToken: string | null;
        isActive: boolean;
    })[]>;
    getUser(userId: string): Promise<{
        servicesOffered: {
            id: string;
            rating: number | null;
            createdAt: Date;
            updatedAt: Date;
            category: string;
            price: number;
            title: string;
            description: string;
            meetingTypes: import(".prisma/client").$Enums.MeetingType[];
            influencerId: string;
            stripePriceId: string | null;
        }[];
        bookingsAsHost: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            influencerId: string;
            hostId: string;
            serviceId: string;
            status: import(".prisma/client").$Enums.BookingStatus;
            meetingType: import(".prisma/client").$Enums.MeetingType;
            meetingTime: Date;
            totalPrice: number;
            stripePaymentIntentId: string | null;
        }[];
        bookingsAsInfluencer: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            influencerId: string;
            hostId: string;
            serviceId: string;
            status: import(".prisma/client").$Enums.BookingStatus;
            meetingType: import(".prisma/client").$Enums.MeetingType;
            meetingTime: Date;
            totalPrice: number;
            stripePaymentIntentId: string | null;
        }[];
        reviewsReceived: {
            id: string;
            rating: number;
            createdAt: Date;
            updatedAt: Date;
            bookingId: string;
            reviewerId: string;
            receiverId: string;
            comment: string;
        }[];
    } & {
        id: string;
        email: string;
        password: string | null;
        name: string;
        role: import(".prisma/client").$Enums.UserRole;
        profileImage: string | null;
        bio: string | null;
        rating: number | null;
        createdAt: Date;
        updatedAt: Date;
        googleId: string | null;
        stripeCustomerId: string | null;
        stripeAccountId: string | null;
        refreshToken: string | null;
        isActive: boolean;
    }>;
    updateUserStatus(userId: string, isActive: boolean): Promise<{
        id: string;
        email: string;
        password: string | null;
        name: string;
        role: import(".prisma/client").$Enums.UserRole;
        profileImage: string | null;
        bio: string | null;
        rating: number | null;
        createdAt: Date;
        updatedAt: Date;
        googleId: string | null;
        stripeCustomerId: string | null;
        stripeAccountId: string | null;
        refreshToken: string | null;
        isActive: boolean;
    }>;
    getBookings(status?: BookingStatus): Promise<({
        influencer: {
            id: string;
            email: string;
            password: string | null;
            name: string;
            role: import(".prisma/client").$Enums.UserRole;
            profileImage: string | null;
            bio: string | null;
            rating: number | null;
            createdAt: Date;
            updatedAt: Date;
            googleId: string | null;
            stripeCustomerId: string | null;
            stripeAccountId: string | null;
            refreshToken: string | null;
            isActive: boolean;
        };
        host: {
            id: string;
            email: string;
            password: string | null;
            name: string;
            role: import(".prisma/client").$Enums.UserRole;
            profileImage: string | null;
            bio: string | null;
            rating: number | null;
            createdAt: Date;
            updatedAt: Date;
            googleId: string | null;
            stripeCustomerId: string | null;
            stripeAccountId: string | null;
            refreshToken: string | null;
            isActive: boolean;
        };
        service: {
            id: string;
            rating: number | null;
            createdAt: Date;
            updatedAt: Date;
            category: string;
            price: number;
            title: string;
            description: string;
            meetingTypes: import(".prisma/client").$Enums.MeetingType[];
            influencerId: string;
            stripePriceId: string | null;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        influencerId: string;
        hostId: string;
        serviceId: string;
        status: import(".prisma/client").$Enums.BookingStatus;
        meetingType: import(".prisma/client").$Enums.MeetingType;
        meetingTime: Date;
        totalPrice: number;
        stripePaymentIntentId: string | null;
    })[]>;
    resolveDispute(bookingId: string, resolution: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        influencerId: string;
        hostId: string;
        serviceId: string;
        status: import(".prisma/client").$Enums.BookingStatus;
        meetingType: import(".prisma/client").$Enums.MeetingType;
        meetingTime: Date;
        totalPrice: number;
        stripePaymentIntentId: string | null;
    }>;
}
