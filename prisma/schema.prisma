generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String
  role          UserRole
  profileImage  String?
  bio           String?
  rating        Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  googleId      String?   @unique
  stripeCustomerId String? @unique
  stripeAccountId String? @unique
  refreshToken  String?
  isActive      Boolean   @default(true)

  // Relations
  servicesOffered PodcastService[] @relation("InfluencerServices")
  bookingsAsHost  Booking[]        @relation("HostBookings")
  bookingsAsInfluencer Booking[]   @relation("InfluencerBookings")
  reviewsGiven    Review[]         @relation("ReviewsGiven")
  reviewsReceived Review[]         @relation("ReviewsReceived")
}

model PodcastService {
  id           String    @id @default(uuid())
  title        String
  description  String
  price        Float
  meetingTypes MeetingType[]
  category     String
  rating       Float?
  influencerId String
  stripePriceId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  influencer   User      @relation("InfluencerServices", fields: [influencerId], references: [id])
  bookings     Booking[]
}

model Booking {
  id           String      @id @default(uuid())
  hostId       String
  influencerId String
  serviceId    String
  status       BookingStatus
  meetingType  MeetingType
  meetingTime  DateTime
  totalPrice   Float
  stripePaymentIntentId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  host         User           @relation("HostBookings", fields: [hostId], references: [id])
  influencer   User           @relation("InfluencerBookings", fields: [influencerId], references: [id])
  service      PodcastService @relation(fields: [serviceId], references: [id])
  reviews      Review[]
}

model Review {
  id           String    @id @default(uuid())
  bookingId    String
  reviewerId   String
  receiverId   String
  rating       Float
  comment      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  booking      Booking   @relation(fields: [bookingId], references: [id])
  reviewer     User      @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  receiver     User      @relation("ReviewsReceived", fields: [receiverId], references: [id])
}

enum UserRole {
  HOST
  INFLUENCER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum MeetingType {
  IN_PERSON
  VIDEO
}